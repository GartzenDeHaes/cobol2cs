using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CobolParser.Text
{
	public abstract class SourceWriterBase : ISourceWriter
	{
		protected IDictionary<string, string> _variables = new Dictionary<string, string>();
		private int _indentLevel;

		public string LineEnding
		{
			get;
			set;
		}

		public int IndentLevel
		{
			get { return _indentLevel; }
			set { _indentLevel = value; }
		}

		public IDictionary<string, string> Variables
		{
			get { return _variables; }
			set { _variables = value; }
		}

		public ISourceWriter MirrorWriter
		{
			get;
			set;
		}

		protected SourceWriterBase()
		{
			LineEnding = "\r\n";
		}

		public abstract void Close();

		public IDisposable NewVariableScope()
		{
			IDictionary<string, string> oldVariables = _variables;
			_variables = new Dictionary<string, string>(_variables);
			return new VariableRestorer(this, oldVariables);
		}

		public IDisposable LockThis()
		{
			WriteLine("lock (this)");
			WriteLine("{");
			_indentLevel++;
			return new Outdenter(this);
		}

		public IDisposable Indent()
		{
			WriteLine("{");
			_indentLevel++;
			return new Outdenter(this);
		}

		public void IndentManual()
		{
			WriteLine("{");
			_indentLevel++;
		}

		public void Unindent()
		{
			_indentLevel--;
			WriteLine("}");
		}

		public void WriteLine()
		{
			Write(LineEnding);
		}

		public void WriteIndent()
		{
			for (int i = 0; i < _indentLevel; ++i)
			{
				Write("\t");
			}
		}

		public string WriteLine(string line)
		{
			WriteIndent();
			Write(line);
			Write(LineEnding);

			return line;
		}

		public char Write(char ch)
		{
			Write(ch.ToString());

			return ch;
		}

		public string WriteUsing(string ns)
		{
			Write("using ");
			Write(ns);
			Write(";");
			WriteLine();

			return ns;
		}

		public abstract string Write(string str);

		public void WriteDocumentation(string summary, string longDescription)
		{
			if (string.IsNullOrEmpty(summary) && string.IsNullOrEmpty(longDescription))
			{
				WriteLine("/// <summary>");
				WriteLine("/// Undocumented");
				WriteLine("/// </summary>");
			}
			else
			{
				if (!string.IsNullOrEmpty(summary))
				{
					WriteLine("/// <summary>");
					WriteLine("/// " + summary);
					WriteLine("/// </summary>");
				}
				if (!string.IsNullOrEmpty(longDescription))
				{
					WriteLine("/// <remarks>");
					WriteLine("/// " + longDescription);
					WriteLine("/// </remarks>");
				}
			}
		}

		public void WriteInterfaceWarning()
		{
			WriteLine("/*");
			WriteLine(" * Note!  This Interface was generated by a tool.");
			WriteLine(" * ");
			WriteLine(" * DO NOT MODIFY!  Any code changes will be overlaid on re-generation.  To extend this code,");
			WriteLine(" * create a separate file containing a partial interface (with the same namespace and name) and ");
			WriteLine(" * add additional method and property signatures there.");
			WriteLine(" */");
		}

		public void WriteClassWarning()
		{
			WriteLine("/*");
			WriteLine(" * Note!  This Class was generated by a tool.");
			WriteLine(" * ");
			WriteLine(" * DO NOT MODIFY!  Any code changes will be overlaid on re-generation.  To extend this code,");
			WriteLine(" * create a separate file containing a partial class (with the same namespace and name) and ");
			WriteLine(" * add additional method and property there.  Be sure to add any public signatures to the ");
			WriteLine(" * interface for the class in the same fashion.");
			WriteLine(" */");
		}

		public abstract void Dispose();

		protected string ReplaceVariables(string text)
		{
			foreach (var k in _variables)
			{
				text = text.Replace("{" + k.Key + "}", k.Value);
			}
			return text;
		}

		class Outdenter : IDisposable
		{
			private ISourceWriter _writer;

			internal Outdenter(ISourceWriter writer)
			{
				_writer = writer;
			}

			public void Dispose()
			{
				_writer.Unindent();
				GC.SuppressFinalize(this);
			}
		}

		class VariableRestorer : IDisposable
		{
			private ISourceWriter _writer;
			private IDictionary<string, string> _variables;

			internal VariableRestorer(ISourceWriter writer, IDictionary<string, string> variables)
			{
				_variables = variables;
				_writer = writer;
			}

			public void Dispose()
			{
				_writer.Variables = _variables;
				GC.SuppressFinalize(this);
			}
		}
	}
}
